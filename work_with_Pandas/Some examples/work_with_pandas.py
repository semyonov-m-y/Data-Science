import pandas as pd

city = {'Город': ['Москва', 'Санкт-Петербург', 'Новосибирск', 'Екатеринбург'],
        'Год основания': [1147, 1703, 1893, 1723],
        'Население': [11.9, 4.9, 1.5, 1.4]}  # Создаём словарь с нужной информацией о городах.

df = pd.DataFrame(city)  # Превращаем словарь в DataFrame, используя стандартный метод библиотеки.
print(df)  # Выводим DataFrame на экран.
#Важно! При работе в Google Colab или Jupyter Notebook для вывода DataFrame или Series на экран не используется команда print. Pandas умеет показывать данные и без неё. Если же написать print(df), то табличная вёрстка потеряется.
print(df.columns) #выводим названия столбцов
df = df.rename(columns={'Город' : 'city',
                        'Год основания' : 'year of foundation',
                        'Население' : 'population'})
#А это пример переименования лэйблов строк из 0 в Ivanov и из 1 в Vasilev:  df = df.rename(index={0: 'Ivanov', 1: 'Vasilev'})

print(df.head())
print(df['city']) #выводим одну колонку
print(df.city) #или так (векторизация)
'''
Векторизация — это специальная техника, позволяющая в пандасе быстро выполнять в одну строчку операции, которые в чистом питоне требуют как минимум одного цикла. 
Быстрота связана с тем, что код пандаса реализован на более быстром чем питон языке, а в питоне просто представлены функции. 
Благодаря векторизации мы можем делать различные операции со всеми колонками целиком, не отвлекаясь на итерирование по элементам. Например:
1) Умножим каждый элемент на 3: df.city * 3
2) Или выясним для каждого значения больше ли оно чем 3: df.city > 3
'''
print(df[['city', 'population']]) #выводим выбранные колонки
print('\n')

df = pd.read_csv('Internet Speed 2022.csv')
print(df)
print('Head: ' + str(df.head())) #показываем первые записи таблицы (по умолчанию 5)
print('Tail: ' + str(df.tail())) #показываем последние записи таблицы
print('Shape:' + str(df.shape)) #показываем количество строк и колонок
print('Dtype ' + str(df.dtypes)) #проверяем тип данных в таблице
print(df.sort_values('mobile', ascending=False).head()) #сортируем по столбцу mobile
print(df.dropna()) #удаляем полностью строки, если в них в одной из ячеек есть значение NaN
df_without_nan = df.dropna()
print(df_without_nan.sort_values('mobile', ascending=True))
print('Describe ' + str(df.describe())) #метод для вывода описания числовых колонок в датафрэйме
print('\n')

