'''
Типичная ситуация в работе дата-сайентиста: данные есть, но хранятся в таком виде, что модели машинного обучения их не поймут, — например, в таблице Excel.
Преобразуем эти данные в удобный для компьютеров формат с помощью популярной Python-библиотеки Pandas. Для этого:
Превратим таблицу Excel в датафрейм Pandas;
Изучим данные с помощью атрибутов и методов .head (), .describe (), .info ();
Преобразуем нечисловые данные в числа, понятные компьютеру.
'''
import pandas

#index_col=0  означает, что индексной, то есть самой левой колонкой в таблице, где обычно идут номера строк, мы назначаем колонку с номером 0
trips_df = pandas.read_excel('trips_data.xlsx', index_col=0)
print(trips_df.head(10)) #Метод .head () выводит голову таблицы. Есть аналогичный метод .tail () — по-английски «хвост». Он тоже выводит строки, но уже с конца таблицы.

#Исследуем данные: методы и атрибуты
#Кроме методов, у датафреймов есть неотъемлемые свойства, которые называются атрибутами.
print(trips_df.salary) # выведется только колонка salary
print(trips_df.salary.describe()) # описание данных из одной колонки
'''
Метод .describe (), применённый к колонке salary таблицы trips_df, показал нам следующее.
count — количество строк: 1 000.
mean — средний доход составляет 111 935 рублей. Неплохо!
std — под этим сокращением скрыто так называемое стандартное (среднеквадратичное) отклонение, которое показывает величину разброса значений. В нашем случае оно довольно большое, почти 55 000 рублей. Это означает, что доходы у людей в таблице очень разные.
min — минимальное значение доходов из таблицы. Ноль значит, что есть как минимум один человек с нулевым доходом.
В математической статистике процентиль, или перцентиль (ударение на последний слог), — это, если по-простому, пара чисел. 
Первое из них — процентная доля тех значений рассматриваемой величины, которые не превышают второго числа. Например, фраза «двадцать пятый процентиль доходов туристов составляет 68 000 рублей в месяц» означает, что у 25% наших туристов доход не превышает этой суммы. А у остальных, что очевидно, доход больше.
'''
#Превращаем данные: переводим слова в числа
'''
Колонка salary очень удобна с точки зрения машинного обучения, потому что содержит числа и ничего, кроме чисел. Но кроме неё в нашей таблице есть и непонятные для машины колонки с городами, видами отпуска, транспортными предпочтениями и целевым городом — всё это так называемые категориальные признаки.
Эти признаки, состоящие из слов, нам надо превратить в числовые. Поэтому каждое значение признака мы преобразуем в отдельную колонку, и каждую получившуюся колонку добавим к исходной таблице.
Так, в колонке city у нас имеется 11 городов. Значит, к исходной таблице добавится 11 колонок с их названиями. Если какой-то турист, например, был из Ярославля, то в одной из новых колонок city_Ярославль у него будет стоять единица, а в других десяти «городовых» колонках — нули.
Процесс превращения слов в числа называется кодированием категориальных признаков. Способ, который мы применим, называется прямым кодированием, или, по-английски, one-hot encoding. Есть и другие, более изощрённые способы преобразования нечисловых колонок.
Точно так же мы поступим с колонками предпочтений видов отпуска и транспорта: если какому-то туристу больше нравится поезд, во вновь созданной колонке transport_preference_Поезд будет единица, а в других — нули.
Для прямого кодирования в Pandas имеется функция get_dummies ():
'''
trips_df_2 = pandas.get_dummies(trips_df, columns=['city', 'vacation_preference', 'transport_preference'])
#В итоге у нас получилась таблица из 24 колонок. Выведем список только из их названий с помощью атрибута .columns:
trips_df_2.columns