#В исходной таблице собраны данные о тысяче туристов: возраст, доходы, предпочтения. Ключевая колонка называется target — это город, который конкретный турист выбрал в итоге для поездки. Наша модель научится предсказывать именно её значение — уже для новых туристов.
import pandas as pd
from sklearn.ensemble import RandomForestClassifier 

df = pd.read_excel('trips_data_for_ML.xlsx', index_col = 0) #index_col=0 означает, что индексной колонкой (той, где идут номера строк) в нашей новой таблице df мы назначили колонку под номером 0
df.head() #метод head показывает первые строки свежесозданного датафрейма (по умолчанию 5). Этим удобно пользоваться, если нужно убедиться, что данные прочитались правильно.
'''
Теперь датафрейм с нашими данными надо превратить в датасет, на котором модель машинного обучения сможет тренироваться.
Для этого разобьём df на две части, которые обозначим как X и y. Идея в том, чтобы в Х содержались все данные туристов, кроме колонки target, то есть выбранных ими городов, а в y — только колонка target c этими городами.
Это похоже на задачник: в одной, большой части находятся условия задач (данные туристов), а в другой части, поменьше, — правильные ответы (города, которые они выбрали). Модель будет учиться именно по этому «задачнику».
'''
X = df.drop('target', axis = 1) #колонку target выкинули по второй колоночной оси целиком
y = df['target'] #записали target в y
#Теперь наши исходные данные поделены на два датафрейма, готовых для обучения модели.
model = RandomForestClassifier() #В переменную с названием model мы записали модель типа Random Forest Classifier с параметрами по умолчанию (в скобках пусто). Эта переменная и есть наша модель машинного обучения.
model.fit(X, y) # обучаем модель
#С точки зрения нашей модели любой турист выглядит примерно так:
example = {'age': [31],
 'city_Екатеринбург': [0],
 'city_Киев': [0],
 'city_Краснодар': [1],
 'city_Минск': [0],
 'city_Москва': [0],
 'city_Новосибирск': [0],
 'city_Омск': [0],
 'city_Петербург': [0],
 'city_Томск': [0],
 'city_Хабаровск': [0],
 'city_Ярославль': [0],
 'family_members': [0],
 'salary': [130000],
 'transport_preference_Автомобиль': [1],
 'transport_preference_Космический корабль': [0],
 'transport_preference_Морской транспорт': [0],
 'transport_preference_Поезд': [0],
 'transport_preference_Самолет': [0],
 'vacation_preference_Архитектура': [0],
 'vacation_preference_Ночные клубы': [0],
 'vacation_preference_Пляжный отдых': [0],
 'vacation_preference_Шопинг': [1]}

example_df = pd.DataFrame(example) #преобразуем словарь example в pandas-формат DataFrame и помещает его в переменную example_df
print(model.predict(example_df)) #Делаем предсказание
#Меняя возраст, город и другие параметры в значениях словаря example, можно получать прогнозы модели для других туристов.
